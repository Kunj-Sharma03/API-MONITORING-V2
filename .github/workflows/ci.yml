name: CI/CD Pipeline
# This tells GitHub what to call this workflow

on:
  # When should this workflow run?
  push:
    branches: [ master, main, develop ]
    # Run on pushes to main branches
  pull_request:
    branches: [ master, main, develop ]
    # Run on pull requests to main branches
  workflow_dispatch:
    # Allow manual trigger from GitHub UI

jobs:
  # Job 1: Code Quality Checks
  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest
    # Use latest Ubuntu virtual machine
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      # Download the repository code
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
      # Install Node.js version 18 and cache dependencies
        
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
      # Install exact versions from package-lock.json (faster than npm install)
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run ESLint on backend
      run: |
        cd backend
        npm run lint
      # Check code style and potential errors
        
    - name: Run ESLint on frontend
      run: |
        cd frontend
        npm run lint

  # Job 2: Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Audit backend dependencies
      run: |
        cd backend
        npm audit --audit-level high
      # Check for high-severity security vulnerabilities
        
    - name: Audit frontend dependencies
      run: |
        cd frontend
        npm audit --audit-level high

  # Job 3: Build Testing
  build-test:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [lint-and-format]
    # Only run if code quality checks pass
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install and build backend
      run: |
        cd backend
        npm ci
        # Backend doesn't need build step, but we verify dependencies work
        
    - name: Install and build frontend
      run: |
        cd frontend
        npm ci
        npm run build
      # Build the Next.js application for production
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/.next
      # Save the built frontend for potential deployment

  # Job 4: Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint-and-format]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      # Enable advanced Docker features
      
    - name: Build backend Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: ap-eye-backend:test
      # Build Docker image but don't push it
        
    - name: Build frontend Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: ap-eye-frontend:test

  # Job 5: Deployment Readiness Check (only on main branch)
  deployment-ready:
    name: ✅ Deployment Ready
    runs-on: ubuntu-latest
    needs: [security-audit, build-test, docker-build]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    # Only run if all tests pass AND it's a push to master branch
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: ✅ Validate Deployment Requirements
      run: |
        echo "🔍 Checking deployment readiness..."
        
        # Check if required files exist
        echo "📁 Checking Dockerfiles..."
        [ -f "backend/Dockerfile" ] && echo "✅ Backend Dockerfile found" || echo "❌ Backend Dockerfile missing"
        [ -f "frontend/Dockerfile" ] && echo "✅ Frontend Dockerfile found" || echo "❌ Frontend Dockerfile missing"
        
        # Check if environment examples exist
        echo "� Checking environment configuration..."
        [ -f "backend/.env.example" ] && echo "✅ Backend .env.example found" || echo "⚠️ Backend .env.example missing (optional)"
        
        # Check if package.json has required scripts
        echo "📦 Checking package.json scripts..."
        grep -q '"start"' backend/package.json && echo "✅ Backend start script found" || echo "❌ Backend start script missing"
        grep -q '"build"' frontend/package.json && echo "✅ Frontend build script found" || echo "❌ Frontend build script missing"
        
        echo "🎉 All basic deployment requirements satisfied!"
        echo "📝 Ready for Railway (backend) and Vercel (frontend) deployment"
        
    - name: 📋 Display Deployment Instructions
      run: |
        echo "🚀 DEPLOYMENT INSTRUCTIONS:"
        echo "=========================="
        echo ""
        echo "🔴 BACKEND (Railway):"
        echo "1. Connect GitHub repo to Railway"
        echo "2. Set environment variables in Railway dashboard"
        echo "3. Deploy automatically on push to master"
        echo ""
        echo "🔵 FRONTEND (Vercel):"
        echo "1. Connect GitHub repo to Vercel"
        echo "2. Set NEXT_PUBLIC_API_URL to Railway backend URL"
        echo "3. Deploy automatically on push to master"
        echo ""
        echo "📚 See DEPLOYMENT.md for detailed instructions"
